import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";

export default function Register() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");
  const [focusField, setFocusField] = useState("");
  const [buttonHover, setButtonHover] = useState(false);
  const [hovered, setHovered] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const navigate = useNavigate();

  const colors = {
    topBefore: "#dcd7c9",
    topAfter: "#f5f5f5",
    bottomBefore: "#333333",
    bottomAfter: "#1a1a1a",
  };

  const inputStyle = {
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: "#ccc",
    width: "100%",
    padding: "0.75rem 1rem",
    margin: "5px 0",
    borderRadius: "4px",
    fontSize: "1rem",
    outline: "none",
    backgroundColor: "#333333",
    color: "#f5f5f5",
  };

  const inputFocusStyle = {
    borderColor: "#f5f5f5",
    boxShadow: "0 0 0 3px rgba(255,255,255,0.1)",
  };

  const buttonStyle = {
    marginTop: "1rem",
    padding: "0.75rem",
    background: buttonHover ? "#555555" : "#1a1a1a",
    color: "#f5f5f5",
    border: "none",
    borderRadius: "4px",
    cursor: "pointer",
    fontSize: "1rem",
    fontWeight: 500,
    transition: "all 0.3s",
  };

  const shapeStyle = (rotate, background) => ({
    position: "absolute",
    width: "200vmax",
    height: "200vmax",
    top: "50%",
    left: "50%",
    marginTop: "-100vmax",
    transform: `rotate(${rotate}deg)`,
    transformOrigin: hovered ? "-200px 50%" : "0 50%",
    marginLeft: hovered ? "200px" : "0px",
    background: background,
    opacity: 0.65,
    transition: "all 0.5s cubic-bezier(0.445, 0.05, 0, 1)",
    zIndex: 1,
  });

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (password !== confirm) {
      return setErrorMessage("Passwords do not match");
    }

    try {
      // âœ… Use relative path so proxy forwards to backend
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, email, password }),
      });

      const rawText = await response.text();
      let data = null;
      try { data = rawText ? JSON.parse(rawText) : null; } catch (_) { /* non-JSON error */ }

      if (!response.ok) {
        const message = (data && data.message)
          || `${response.status} ${response.statusText}`
          || "Registration failed";
        return setErrorMessage(message);
      }

      // Show success message
      setSuccessMessage("Successfully registered!");
      setErrorMessage("");

      // Navigate to login after 2 seconds
      setTimeout(() => {
        navigate("/login");
      }, 2000);
    } catch (err) {
      console.error(err);
      setErrorMessage("Network error: Could not connect to backend");
    }
  };

  return (
    <div
      style={{
        position: "relative",
        width: "100%",
        height: "100vh",
        overflow: "hidden",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "#f5f5f5",
      }}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {/* Animated shapes */}
      <div style={shapeStyle(45, colors.topBefore)} />
      <div style={shapeStyle(135, colors.topAfter)} />
      <div style={shapeStyle(-45, colors.bottomBefore)} />
      <div style={shapeStyle(-135, colors.bottomAfter)} />

      {/* Main Panel */}
      <div
        style={{
          position: "relative",
          width: "800px",
          maxWidth: "90vw",
          height: "500px",
          borderRadius: "2rem",
          display: "flex",
          overflow: "hidden",
          boxShadow: "-1px -2px 42px -19px rgba(0,0,0,0.2)",
          backgroundColor: "#fff",
          zIndex: 10,
          opacity: hovered ? 1 : 0,
          transition: "opacity 0.5s cubic-bezier(0.445, 0.05, 0, 1)",
        }}
      >
        {/* Left Form Panel */}
        <div
          style={{
            flex: 1,
            padding: "50px",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            backgroundColor: "#333333",
            color: "#f5f5f5",
          }}
        >
          <h2 style={{ marginBottom: "0.5rem" }}>Create Your Account</h2>
          <p style={{ marginBottom: "1.5rem", color: "#dcd7c9" }}>
            Join us today and start managing your tasks efficiently.
          </p>
          {errorMessage && (
            <p style={{ color: "red", textAlign: "center", marginBottom: "1rem" }}>
              {errorMessage}
            </p>
          )}
          <form
            onSubmit={handleSubmit}
            style={{ display: "flex", flexDirection: "column" }}
          >
            <input
              type="text"
              placeholder="Full Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              onFocus={() => setFocusField("name")}
              onBlur={() => setFocusField("")}
              style={{ ...inputStyle, ...(focusField === "name" ? inputFocusStyle : {}) }}
              required
            />
            <input
              type="email"
              placeholder="Email Address"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              onFocus={() => setFocusField("email")}
              onBlur={() => setFocusField("")}
              style={{ ...inputStyle, ...(focusField === "email" ? inputFocusStyle : {}) }}
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onFocus={() => setFocusField("password")}
              onBlur={() => setFocusField("")}
              style={{ ...inputStyle, ...(focusField === "password" ? inputFocusStyle : {}) }}
              required
            />
            <input
              type="password"
              placeholder="Confirm Password"
              value={confirm}
              onChange={(e) => setConfirm(e.target.value)}
              onFocus={() => setFocusField("confirm")}
              onBlur={() => setFocusField("")}
              style={{ ...inputStyle, ...(focusField === "confirm" ? inputFocusStyle : {}) }}
              required
            />
            <button
              type="submit"
              style={buttonStyle}
              onMouseEnter={() => setButtonHover(true)}
              onMouseLeave={() => setButtonHover(false)}
            >
              Sign Up
            </button>
          </form>
        </div>

        {/* Right Welcome Panel */}
        <div
          style={{
            flex: 1,
            backgroundColor: "#f5f5f5",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            color: "#333333",
            padding: "50px",
          }}
        >
          <h2>Welcome Back!</h2>
          <p style={{ marginBottom: "2rem" }}>
            Already have an account? Login to continue managing your tasks.
          </p>
          <Link
            to="/login"
            style={{
              textDecoration: "none",
              padding: "0.75rem 2rem",
              backgroundColor: "#333333",
              color: "#f5f5f5",
              borderRadius: "4px",
              fontWeight: "bold",
            }}
          >
            LOGIN
          </Link>
        </div>
      </div>

      {/* Centered Success Message */}
      {successMessage && (
        <div
          style={{
            position: "fixed",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            backgroundColor: "#4BB543",
            color: "#fff",
            padding: "1.5rem 3rem",
            borderRadius: "10px",
                        fontSize: "1.2rem",
            fontWeight: "bold",
            boxShadow: "0 5px 20px rgba(0,0,0,0.3)",
            zIndex: 50,
            textAlign: "center",
            animation: "fadein 0.5s ease-in-out",
          }}
        >
          {successMessage}
        </div>
      )}
    </div>
  );
}