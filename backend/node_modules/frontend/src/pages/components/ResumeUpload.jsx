import React, { useState } from 'react';

// Define allowed file types and max size for validation
const ALLOWED_TYPES = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
const MAX_SIZE_MB = 5;

export default function ResumeUpload({ setUser }) {
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState(null);

  const handleUpload = async e => {
    const file = e.target.files[0];
    if (!file) return;

    // --- Reset states on new upload ---
    setUploading(true);
    setError(null);

    try {
      // --- 1. Client-Side Validation ---
      if (!ALLOWED_TYPES.includes(file.type)) {
        throw new Error('Invalid file type. Please upload a PDF or DOCX file.');
      }
      if (file.size > MAX_SIZE_MB * 1024 * 1024) {
        throw new Error(`File is too large. Maximum size is ${MAX_SIZE_MB}MB.`);
      }

      // --- 2. FormData and Fetch ---
      const formData = new FormData();
      formData.append('resume', file);

      const res = await fetch('/api/user/upload-resume', {
        method: 'POST',
        body: formData
      });

      // --- 3. Handle non-OK responses ---
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({ message: 'An unknown error occurred.' }));
        throw new Error(errorData.message || 'Upload failed. Please try again.');
      }

      const updatedUser = await res.json();
      setUser(updatedUser); // Update parent state on success

    } catch (err) {
      // --- 4. Catch and display errors ---
      setError(err.message);
    } finally {
      // --- 5. Always stop the loading indicator ---
      setUploading(false);
    }
  };

  return (
    <div style={{ fontFamily: 'sans-serif', padding: '20px', border: '1px solid #ddd', borderRadius: '8px' }}>
      <h3 style={{ marginTop: 0 }}>Upload Resume</h3>
      <p style={{ fontSize: '14px', color: '#666' }}>Accepts PDF, DOC, DOCX up to {MAX_SIZE_MB}MB.</p>

      {/* Styled file input for better UX */}
      <label
        htmlFor="resume-upload"
        style={{
          display: 'inline-block',
          padding: '10px 15px',
          backgroundColor: uploading ? '#ccc' : '#007bff',
          color: 'white',
          borderRadius: '5px',
          cursor: uploading ? 'not-allowed' : 'pointer',
        }}
      >
        {uploading ? 'Uploading...' : 'Choose File'}
      </label>
      <input
        id="resume-upload"
        type="file"
        onChange={handleUpload}
        disabled={uploading}
        style={{ display: 'none' }} // Hide the default ugly input
      />

      {/* Display error messages */}
      {error && <p style={{ color: 'red', marginTop: '10px' }}>Error: {error}</p>}
    </div>
  );
}